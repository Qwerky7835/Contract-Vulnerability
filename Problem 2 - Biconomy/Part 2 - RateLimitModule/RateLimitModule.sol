//SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

contract RateLimitModule {
    string public constant NAME = "Rate Limiting Module";
    string public constant VERSION = "0.0.1";

    // stores the smart account's per day transaction limits
    ///@dev using uint8 to rate limit potential ddos accounts.
    uint8 private transactionRate;
    Counter private dailyCounter;
    // user set spending limit
    uint private spendLimit;

    // The counter stores the day and the number of transactions for that day
    struct Counter{
        uint day;
        uint8 count;
    }

    error dailyTransactionLimitSurpassed();
    error exceededSpendLimit();

    constructor(){
        //Timestamp round off to the day
        dailyCounter = Counter({day: block.timestamp/1 days, count: 0});
    }

    // Setter functions for the smart accounts
    function setTransactionRate(uint8 dailyRate) external {
        transactionRate = dailyRate;
    }

    function setSpendLimit(uint amount) external {
        spendLimit = amount;
    }

    ///@dev Limiter function that checks both limits
    function limitUserOp(uint tx_value) external {
        // Check that the transaction is below spending limit
        if (tx_value > spendLimit){
            revert exceededSpendLimit();
        }

        // Get the counter date 
        uint date = dailyCounter.day;
        uint current = block.timestamp/(1 days);

        // Check daily transaction count.
        // If it is a new day, set counter and immediately pass check
        // If it is same day, check if limit has been reached
        if (current - date > 0){
            dailyCounter.day = current;
            dailyCounter.count = 1;
            return;
        } else {
            uint currentCount = dailyCounter.count;
            if (currentCount+1 <= transactionRate){
                dailyCounter.count ++;
                return;
            } else {
                revert dailyTransactionLimitSurpassed();
            }
        }
    }
}