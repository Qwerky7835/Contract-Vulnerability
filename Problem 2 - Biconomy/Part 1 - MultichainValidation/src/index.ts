import { config } from "dotenv";
import { IBundler, Bundler } from "@biconomy/bundler";
import { ChainId } from "@biconomy/core-types";
import {
  BiconomySmartAccountV2,
  DEFAULT_ENTRYPOINT_ADDRESS,
} from "@biconomy/account";
import {
  MultiChainValidationModule,
  DEFAULT_MULTICHAIN_MODULE,
} from "@biconomy/modules";
import { ethers } from "ethers";
import {
  IPaymaster,
  BiconomyPaymaster,
  PaymasterMode,
  SponsorUserOperationDto,
} from "@biconomy/paymaster";

config();
const mumbaiProvider = new ethers.providers.JsonRpcProvider(
  "https://rpc.ankr.com/polygon_mumbai",
);

const mumbaiWallet = new ethers.Wallet(process.env.PRIVATE_KEY || "", mumbaiProvider);

// Configure the Bundler and Paymaster for Polygon Mumbai network
const mumbaiBundler: IBundler = new Bundler({
  bundlerUrl:
    "https://bundler.biconomy.io/api/v2/80001/nJPK7B3ru.dd7f7861-190d-41bd-af80-6877f74b8f44",
  chainId: ChainId.POLYGON_MUMBAI,
  entryPointAddress: DEFAULT_ENTRYPOINT_ADDRESS,
});

const mumbaiPaymaster: IPaymaster = new BiconomyPaymaster({
  paymasterUrl:
    "https://paymaster.biconomy.io/api/v1/80001/Tpk8nuCUd.70bd3a7f-a368-4e5a-af14-80c7f1fcda1a",
});

// Configure the Bundler and Paymaster for Base Goerli Testnet
const goerliBundler = new Bundler({
  bundlerUrl:
    "https://bundler.biconomy.io/api/v2/5/nJPK7B3ru.dd7f7861-190d-41bd-af80-6877f74b8f44",
  chainId: ChainId.GOERLI,
  entryPointAddress: DEFAULT_ENTRYPOINT_ADDRESS,
});

const goerliPaymaster: IPaymaster = new BiconomyPaymaster({
  paymasterUrl:
    "https://paymaster.biconomy.io/api/v1/5/m814QNmpW.fce62d8f-41a1-42d8-9f0d-2c65c10abe9a",
});

async function createModule() {
  return await MultiChainValidationModule.create({
    signer: mumbaiWallet,
    moduleAddress: DEFAULT_MULTICHAIN_MODULE,
  });
}

// Function to create a smart account using the specified chain ID, bundler, and paymaster
async function createSmartAccounts(
) {
  const mumbaiModule = await createModule();
  const goerliModule = await createModule();

  let mumbaiSmartAccount = await BiconomySmartAccountV2.create({
    chainId: ChainId.POLYGON_MUMBAI,
    paymaster: mumbaiPaymaster,
    bundler: mumbaiBundler,
    entryPointAddress: DEFAULT_ENTRYPOINT_ADDRESS,
    defaultValidationModule: mumbaiModule,
    activeValidationModule: mumbaiModule,
  });
  console.log(
    "Polygon Smart Account Address: ",
    await mumbaiSmartAccount.getAccountAddress(),
  );

  let goerliSmartAccount = await BiconomySmartAccountV2.create({
    chainId: ChainId.GOERLI,
    paymaster: goerliPaymaster,
    bundler: goerliBundler,
    entryPointAddress: DEFAULT_ENTRYPOINT_ADDRESS,
    defaultValidationModule: goerliModule,
    activeValidationModule: goerliModule,
  });
  console.log(
    "Goerli Smart Account Address: ",
    await goerliSmartAccount.getAccountAddress(),
  );


  return [mumbaiSmartAccount, goerliSmartAccount];
}
createSmartAccounts();


async function deployTransaction() {
  // Create smart accounts for both Polygon Mumbai and Goerli networks
  let smartAccounts = await createSmartAccounts();
  let contractAddress = await smartAccounts[0].getAccountAddress();

  // Define the interface for the NFT contract and encode data for the 'safeMint' function
  const nftInterface = new ethers.utils.Interface([
    "function safeMint(address _to)",
  ]);
  const data = nftInterface.encodeFunctionData("safeMint", [contractAddress]);

  const nftAddress1 = "0x1758f42Af7026fBbB559Dc60EcE0De3ef81f665e";
  const nftAddress2 = "0xe3770AE042d5B5EE86E1c48CE181b173338af87F";

  // Build user operations for the Polygon Mumbai network
  let partialUserOp = await smartAccounts[0].buildUserOp(
    [{ to: nftAddress1, data }],
    {
      paymasterServiceData: { mode: PaymasterMode.SPONSORED },
    },
  );

  // Build user operations for the Base Goerli network
  let partialUserOp2 = await smartAccounts[1].buildUserOp(
    [{ to: nftAddress2, data, value: 10000000000}],
    {
      paymasterServiceData: { mode: PaymasterMode.ERC20 },
    },
  );

   // Sign operations for both networks
   const resolvedOps = await (
    await createModule()
  ).signUserOps([
    { userOp: partialUserOp, chainId: ChainId.POLYGON_MUMBAI },
    { userOp: partialUserOp2, chainId: ChainId.GOERLI},
  ]);


  // Execute the operations on both networks and log the transaction details
  try {
    const userOpResponse1 = await smartAccounts[0].sendSignedUserOp(
      resolvedOps[0],
    );
    const userOpResponse2 = await smartAccounts[1].sendSignedUserOp(
      resolvedOps[1],
    );

    const transactionDetails1 = await userOpResponse1.wait();
    const transactionDetails2 = await userOpResponse2.wait();
    console.log(
      "Polygon Mumbai Transaction: https://mumbai.polygonscan.com/tx/" +
        transactionDetails1.receipt.transactionHash,
    );
    console.log(
      "Base Goerli Transaction: https://goerli.ethereum.io/tx/" +
        transactionDetails2.receipt.transactionHash,
    );
  } catch (e) {
    console.log("Error encountered: ", e);
  }
}

deployTransaction();