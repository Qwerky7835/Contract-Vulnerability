// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import {VulnerableContract} from "src/Vulnerable.sol";

contract VulnerableTest is Test {
    VulnerableContract public v_contract;


    function setUp() public {
        v_contract = new VulnerableContract();
    }

    function testFuzz_Withdraw(uint x) public {
        vm.assume(x <= 100*10**18);
        startHoax(address(1), 150 ether);
        (bool success,) = address(v_contract).call{value: 100 ether}(abi.encodeWithSignature("deposit()"));
        require(success, "Deposit failed");
        console2.logUint(v_contract.balances(address(1)));
        v_contract.withdraw(x);
        assertEq(v_contract.balances(address(1)), 100*10**18-x);
    }
}
